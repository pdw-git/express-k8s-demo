#!/usr/bin/env node

/**
 * Module dependencies.
 */

const dotenv = require('dotenv');
const applogger = require('../app_utilities/logger');
const messages = require('../app_utilities/messages').messages;
const appConfig = require('../app_config/config');
const app = require('../app');
const debug = require('debug')('express:server');
const http = require('http');
const https = require('https');
const fs = require('fs');
const filename = __filename;
const methodName = 'main';
const config = require('../app_config/config');

let server = null;

//get the environment variables from a .env file in the current directory
dotenv.config();

//Get port from environment and store in Express.
const port = normalizePort((process.env.PORT === undefined ? appConfig.defaultPort : process.env.PORT));

applogger._info({filename: filename, methodname: methodName, message: "Application port: "+port});

app.set('port', port);

//set up the http/https server dependent on values stored in the application configuration file

if (typeof(config) !== 'undefined') {

  //if the HTTPS environment variable has been set, check its value and take appropriate action.
  process.env.HTTPS !== undefined ?
    process.env.HTTPS === 'true' ? config.encryption.enabled = true : config.encryption.enabled = false: null;

  const options = {
    key: fs.readFileSync(__dirname+config.encryption.store+config.encryption.key),
    cert: fs.readFileSync(__dirname+config.encryption.store+config.encryption.cert)
  };

  server = config.encryption.enabled ? https.createServer(options, app) : http.createServer(app);

  config.encryption.enabled === true ?
      applogger._info({filename: filename, methodName: methodName, message: messages.https_cert_provider+config.encryption.certProvider}):null;

  if (server !== null) {

    //listen on the defined port
    server.listen(port);

    //define the error and listening behaviours
    server.on('error', onError);
    server.on('listening', onListening);

  }
  else {
    applogger._error({filename: filename, methodName: methodName, message: messages.http_server_creation_error});

  }

}
else {

  applogger._error({filename: filename, methodName: methodName, message: messages.config_file_undefined});
  applogger._info({filename: filename, methodname: methodName, mesasge: messages.http_configuration_error});

}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
